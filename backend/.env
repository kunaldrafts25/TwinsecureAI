# .env - Environment variables for local development

# --- Application Settings ---
PROJECT_NAME="TwinSecure AI Backend"
API_V1_STR="/api/v1"
ENVIRONMENT="development" # development, staging, production
LOG_LEVEL="INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL
DEBUG=true
# --- Security ---


# First Superuser
FIRST_SUPERUSER=admin@example.com
FIRST_SUPERUSER_PASSWORD=admin123
# Feature Flags
ENABLE_ML=True
ENABLE_ALERTING=True
ENABLE_METRICS=True
ENABLE_CACHING=True
ENABLE_RATE_LIMITING=True

# Security Settings (nested)
# Security Settings
SECURITY__SECRET_KEY=2eac339caec02b4fe4a2120068a43f85b316abdfdcb20a68405c080069c5ab87
SECURITY__ALGORITHM=HS256
SECURITY__ACCESS_TOKEN_EXPIRE_MINUTES=30
SECURITY__REFRESH_TOKEN_EXPIRE_DAYS=7
SECURITY__PASSWORD_MIN_LENGTH=12
SECURITY__PASSWORD_MAX_LENGTH=128
SECURITY__PASSWORD_PATTERN=^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{12,}$
SECURITY__SESSION_COOKIE_NAME=twinsecure_session
SECURITY__SESSION_COOKIE_SECURE=true
SECURITY__SESSION_COOKIE_HTTPONLY=true
SECURITY__SESSION_COOKIE_SAMESITE=Lax
SECURITY__CSRF_COOKIE_NAME=twinsecure_csrf
SECURITY__CSRF_COOKIE_SECURE=true
SECURITY__CSRF_COOKIE_HTTPONLY=true
SECURITY__CSRF_COOKIE_SAMESITE=Lax
SECURITY__RATE_LIMIT_ENABLED=true
SECURITY__RATE_LIMIT_DEFAULT=100/minute
SECURITY__JWT_BLACKLIST_ENABLED=true
SECURITY__JWT_BLACKLIST_TOKEN_CHECKS=["access", "refresh"]


# --- Database (PostgreSQL) ---
# For local Docker Compose setup:
#POSTGRES_SERVER=localhost # Docker service name
#POSTGRES_PORT=5432
#POSTGRES_USER='postgres'
#POSTGRES_PASSWORD=kUNAL@#$12345
#POSTGRES_DB=TwinSecure
#POSTGRES_HOST=localhost
# For AWS RDS (replace with your RDS details in production/staging):
# POSTGRES_SERVER=your-rds-instance-endpoint.region.rds.amazonaws.com
# POSTGRES_PORT=5432
# POSTGRES_USER=your_rds_user
# POSTGRES_PASSWORD=your_rds_password # Consider AWS Secrets Manager
# POSTGRES_DB=your_rds_db_name
#DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER}:${POSTGRES_PORT}/${POSTGRES_DB}
# Database Settings (nested)
POSTGRES_SERVER=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=kUNAL@#$12345
POSTGRES_DB=TwinSecure
# db__DATABASE_URL=postgresql+asyncpg://postgres:your-db-password@localhost:5432/TwinSecure

# Cache Settings (nested)
# Cache Settings
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=123456789
CACHE_TTL=3600
CACHE_PREFIX=twinsecure:
CACHE_ENABLED=true
# --- Alerting ---
# Slack
SLACK_WEBHOOK_URL="<YOUR_SLACK_WEBHOOK_URL_HERE>" # Optional
SLACK_CHANNEL="#sec-alerts"

# Email (SMTP)
SMTP_TLS=True
SMTP_PORT=587
SMTP_HOST="smtp.gmail.com" # e.g., smtp.gmail.com or AWS SES endpoint
SMTP_USER="dipu330285@gmail.com" # Your email address
SMTP_PASSWORD="kunalsingh12345" # Store securely!
EMAILS_FROM_EMAIL="noreply@finguard.com"
EMAILS_FROM_NAME="TwinSecure AI"
# List of emails for critical alerts/reports (comma-separated)
ALERT_RECIPIENTS='["ciso@finguard.com","security.leads@finguard.com"]'

# Discord
DISCORD_WEBHOOK_URL="<YOUR_DISCORD_WEBHOOK_URL_HERE>" # Optional

# --- Enrichment Services ---
# AbuseIPDB
ABUSEIPDB_API_KEY="<YOUR_ABUSEIPDB_API_KEY_HERE>" # Optional
ABUSEIPDB_API_URL="https://api.abuseipdb.com/api/v2/check"

# GeoIP (e.g., MaxMind) - Provide path to the database file
# MaxMind GeoIP2 Settings
MAXMIND_LICENSE_KEY=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
MAXMIND_DB_PATH=E:\ts\GeoLite2-City.mmdb
# --- AWS (if using Secrets Manager, etc.) ---
AWS_REGION="ap-south-1" # Pune, India region
# AWS_SECRETS_MANAGER_SECRET_NAME="twinsecure/prod/secrets" # Example

# --- ML Module ---
ML_MODEL_PATH="/models/autoencoder.h5" # Path inside the container
ML_TRAINING_SCHEDULE="0 2 * * *" # Cron schedule for nightly training (e.g., 2 AM)

# --- Rate Limiting (Optional - using slowapi) ---
RATE_LIMIT_ENABLED=True
RATE_LIMIT_DEFAULT="100/minute"

# --- CORS ---
# Comma-separated list of allowed origins
# Use "*" for development only, be specific in production
BACKEND_CORS_ORIGINS=["http://localhost:5173","http://localhost:3000","http://localhost:80","https://your-frontend-domain.com"]

# Generate a strong secret key: openssl rand -hex 32
#SECRET_KEY=2eac339caec02b4fe4a2120068a43f85b316abdfdcb20a68405c080069c5ab87
#ALGORITHM="HS256"
# Access token lifetime in minutes (e.g., 30 minutes)
#ACCESS_TOKEN_EXPIRE_MINUTES=30