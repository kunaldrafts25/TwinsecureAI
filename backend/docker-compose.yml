# docker-compose.yml for local development environment

version: '3.8'

services:
  # Backend FastAPI Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: twinsecure_backend
    env_file:
      - .env # Load environment variables from .env file
    volumes:
      - ./app:/home/appuser/app/app # Mount local code for hot-reloading
      - ./alembic:/home/appuser/app/alembic
      - ./alembic.ini:/home/appuser/app/alembic.ini
      # Mount GeoIP database if needed and path specified in .env
      # - /path/to/your/local/GeoLite2-City.mmdb:/path/to/GeoLite2-City.mmdb:ro
      # Mount ML models if needed
      # - /path/to/your/local/models:/models:ro
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    depends_on:
      db:
        condition: service_healthy # Wait for db to be ready
      # Add redis if used for caching or rate limiting
    # healthcheck: # Optional basic healthcheck
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # Use reload for dev

  # PostgreSQL Database
  db:
    image: postgres:15-alpine # Use a specific version
    container_name: twinsecure_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist data
    env_file:
      - .env # Load DB credentials from .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" # Expose DB port only if needed externally (usually not)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Optional Services for Local Dev ---

  # pgAdmin (Database Admin Tool) - Optional
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: twinsecure_pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - "5050:80" # Access pgAdmin on http://localhost:5050
  #   depends_on:
  #     - db
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin

  # Prometheus (Metrics) - Optional for local testing
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: twinsecure_prometheus
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'

  # Grafana (Visualization) - Optional for local testing
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: twinsecure_grafana
  #   ports:
  #     - "3001:3000" # Access Grafana on http://localhost:3001 (avoid conflict with React default)
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     # - ./monitoring/grafana/provisioning:/etc/grafana/provisioning # Optional provisioning
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   depends_on:
  #     - prometheus

volumes:
  postgres_data: # Define named volume for DB data persistence
  # pgadmin_data: # Define named volume for pgAdmin data
  # grafana_data: # Define named volume for Grafana data

networks:
  default:
    driver: bridge

logging:
  image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
  container_name: twinsecure_logs
  environment:
    - xpack.security.enabled=false
    - discovery.type=single-node
  ports:
    - "9200:9200"
  volumes:
    - logs_data:/usr/share/elasticsearch/data

